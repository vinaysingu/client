/*jshint indent:2, curly:true eqeqeq:true, immed:true, latedef:true,
newcap:true, noarg:true, regexp:true, undef:true, strict:true, trailing:true
white:true*/
/*global XT:true, XM:true, Backbone:true, _:true, console:true */

(function () {
  "use strict";

  /**
    @class

    @extends XM.Document
  */
  XM.Language = XM.Document.extend({
    /** @scope XM.Language.prototype */

    recordType: 'XM.Language',

    documentKey: 'name',

    enforceUpperKey: false,

    readOnly: true

  });

  /**
    @class

    @extends XM.Document
  */
  XM.Locale = XM.Document.extend({
    /** @scope XM.Locale.prototype */

    recordType: 'XM.Locale',

    documentKey: 'code',

    enforceUpperKey: false,

    defaults: {
      altEmphasisColor: "",
      costScale: 2,
      currencyScale: 2,
      description: "",
      emphasisColor: "",
      errorColor: "",
      expiredColor: "",
      extendedPriceScale: 2,
      futureColor: "",
      percentScale: 2,
      purchasePriceScale: 4,
      quantityPerScale: 6,
      quantityScale: 2,
      salesPriceScale: 4,
      unitRatioScale: 6,
      warningColor: "",
      weightScale: 2
    },

    requiredAttributes: [
      "altEmphasisColor",
      "costScale",
      "currencyScale",
      "description",
      "emphasisColor",
      "errorColor",
      "expiredColor",
      "extendedPriceScale",
      "futureColor",
      "percentScale",
      "purchasePriceScale",
      "quantityPerScale",
      "quantityScale",
      "salesPriceScale",
      "unitRatioScale",
      "warningColor",
      "weightScale"
    ]

  });

  /**
    @class

    @extends XM.Model
  */
  XM.Privilege = XM.Model.extend({
    /** @scope XM.Privilege.prototype */

    recordType: 'XM.Privilege',

    readOnly: true

  });

  /**
    @class

    @extends XM.Document
  */
  XM.UserAccountRole = XM.Document.extend({
    /** @scope XM.UserAccountRole.prototype */

    recordType: 'XM.UserAccountRole',

    documentKey: 'name'

  });

  /**
    @class

    @extends XM.Info
  */
  XM.UserAccountRoleRelation = XM.Info.extend({
    /** @scope XM.UserAccountRoleRelation.prototype */

    recordType: 'XM.UserAccountRoleRelation',

    editableModel: 'XM.UserAccountRole'

  });

  /**
    @class

    @extends XM.Model
  */
  XM.UserAccountRolePrivilegeAssignment = XM.Model.extend({
    /** @scope XM.UserAccountRolePrivilegeAssignment.prototype */

    recordType: 'XM.UserAccountRolePrivilegeAssignment'

  });

  /**
    @class

    @extends XM.Document
  */
  XM.UserAccount = XM.Document.extend({
    /** @scope XM.UserAccount.prototype */

    idAttribute: 'username',

    recordType: 'XM.UserAccount',

    documentKey: 'username',

    enforceUpperKey: false,

    defaults: {
      disableExport: false
    },

    requiredAttributes: [
      "disableExport",
      "locale"
    ],

    initialize: function (attributes, options) {
      XM.Document.prototype.initialize.apply(this, arguments);
      this.on('statusChange', this.statusChanged);
      this.on('change:username', this.usernameChanged);
      this.statusChanged();
    },
    
    usernameChanged: function () {
      var username = this.get('username');
      if (username) {
        this.set('username', username.toLowerCase());
      }
    },

    /**
     * The username attribute must be editable for a new entry. This overrides
     * the fact that model sets username as readOnly by virtue of its being
     * the idAttribute. Most other idAttributes are autogenerated.
     */
    statusChanged: function () {
      var status = this.getStatus(),
        K = XM.Model;
      if (status === K.READY_NEW) {
        this.setReadOnly('username', false);
      }
    }
  });

  /**
    @class

    @extends XM.Model
  */
  XM.UserAccountPrivilegeAssignment = XM.Model.extend({
    /** @scope XM.UserAccountPrivilegeAssignment.prototype */

    recordType: 'XM.UserAccountPrivilegeAssignment',

    requiredAttributes: [
      "userAccount",
      "privilege"
    ]

  });

  /**
    @class

    @extends XM.Model
  */
  XM.UserAccountUserAccountRoleAssignment = XM.Model.extend({
    /** @scope XM.UserAccountUserAccountRoleAssignment.prototype */

    recordType: 'XM.UserAccountUserAccountRoleAssignment'

  });

  /**
    @class

    @extends XM.Info
  */
  XM.UserAccountRelation = XM.Info.extend({
    /** @scope XM.UserAccountRelation.prototype */

    idAttribute: 'username',

    recordType: 'XM.UserAccountRelation',

    editableModel: 'XM.UserAccount'

  });

  // ..........................................................
  // COLLECTIONS
  //

  /**
   @class

   @extends XM.Collection
  */
  XM.LanguageCollection = XM.Collection.extend({
   /** @scope XM.LanguageCollection.prototype */

    model: XM.Language

  });

  /**
   @class

   @extends XM.Collection
  */
  XM.LocaleCollection = XM.Collection.extend({
   /** @scope XM.LocaleCollection.prototype */

    model: XM.Locale

  });

  /**
   @class

   @extends XM.Collection
  */
  XM.PrivilegeCollection = XM.Collection.extend({
   /** @scope XM.PrivilegeCollection.prototype */

    model: XM.Privilege

  });

  /**
   @class

   @extends XM.Collection
  */
  XM.UserAccountRoleCollection = XM.Collection.extend({
   /** @scope XM.UserAccountRoleCollection.prototype */

    model: XM.UserAccountRole

  });

  /**
   @class

   @extends XM.Collection
  */
  XM.UserAccountRoleRelationCollection = XM.Collection.extend({
   /** @scope XM.UserAccountRoleRelationCollection.prototype */

    model: XM.UserAccountRoleRelation

  });

  /**
   @class

   @extends XM.Collection
  */
  XM.UserAccountRelationCollection = XM.Collection.extend({
   /** @scope XM.UserAccountRelationCollection.prototype */

    model: XM.UserAccountRelation

  });

}());
